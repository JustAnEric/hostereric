const startKey = Math.random();

class NodeCDNConfigSession {
    constructor(auth) {
        this.auth = auth;
        if (auth != `nodejscdnauthorisationkeyenabled-${startKey}`) {
            return console.warn('NodeCDNConfigSession not started because of an access violation.')
        } else { return console.warn('NodeCDNConfigSession started in environment mode.') }
    }

    setRequiredCookies(key) {
        var nodeSessionAuthentication = {
            url: window.location.href,
            sessionName: key,
            state: 'Online',
            authType: 'anonymous',

        }
        sessionStorage.setItem("node_required_cookies__auth", JSON.stringify(nodeSessionAuthentication))
    }
}

class Node {
    constructor() {
        this.key = "DefaultKey" // this is the default key and know for detection
        this.clientType = "WEB-CLIENT" // this is for browser detection when useful
    }

    Client(userKey) {
        this.clientType = navigator.userAgentData
        this.key = userKey
        if (!userKey) return console.error('Invalid user key provided in function Client() for NodeCDN!')
        console.log('Client has been registered.')
        // Set registered cookies
        var cdn = new NodeCDNConfigSession(`nodejscdnauthorisationkeyenabled-${startKey}`);
        cdn.setRequiredCookies(userKey)
        console.log('-----------------------Useful Info-----------------------')
        console.log(`# Your Key: ${this.key}`)
        console.log(`# Client Type: ${this.clientType} --> Chrome (guess?)`)
        console.log(`# IP: unknown and not recorded ! disabled because of hackers!`)
        console.warn(` @ Note: this is private information for you. Do not share it with others otherwise you might be in a pickle! This includes pasting code into this Console too.`)
        console.log('---------------------End Useful Info---------------------')
    }

    PingServer(times) {
        if (!this.key) return console.error('Invalid user key provided in function Client() through PingServer() for NodeCDN!')
        let totalTimesPinged = 0;
        setInterval(function() {
            setTimeout(function() {
                if (totalTimesPinged < times) {
                    console.error('Ping server failed.')
                    totalTimesPinged += 1;
                }
            }, 1000);
        })
    }

    makeFunction(code, executorOptions) {
        if (executorOptions['exec'] == null) return code
        if (executorOptions['exec']) return code()
    }
    safeExec(func) {
      if (!func) {
          console.warn(`Executing function in safe mode...`);
          console.error("[NodeCDN] Uncaught TypeError: no function was provided");
      } else { console.warn(`Executing ${func} in safe mode...`); return func() }
    }
    safeExecute(func) {
      if (!func) {
          console.warn(`Executing function in safe mode...`);
          console.error("[NodeCDN] Uncaught TypeError: no function was provided");
      } else { console.warn(`Executing ${func} in safe mode...`); return func() }
    }
    
    request(method="GET", url, callback, headers={}, body="") {
        fetch(url, {
            method: method,
            callback: callback,
            headers: headers,
            body: body
        });
    }

    match(x, y) {
        if (x == y) { return true; } else { return false; }
    }

    str(input) {
        if (input != undefined) {
            return toString(input);
        } else { console.error("str() function is missing the positional arguments(input) required in this scope.") }
    }

    json(input){
        if (input!=undefined){
            return JSON.parse(input).catch(function(e) { console.error(`The JSON you provided could not be parsed: ${e}`) });
        } else { console.error("json() function is missing the positional arguments(input) required in this scope.") }
    }

    calc(a, b, method){
        if(a && b && method!=undefined){
            if(method=="+"){
                return a + b;
            }
            if(method=="-"){
                return a - b;
            }
            if(method=="*"){
                return a * b;
            }
            if(method=="x"){
                return a / b;
            }
        }
    }

    findElement(tag) {
        return this.doc().querySelector(tag);
    }

    appendChildToParent(parent, child) {
        return parent.appendChild(child);
    }

    doc() {
        return document
    }

    win() {
        return window
    }

    navig() {
        return window.navigator
    }

    whichDevice() {
        let device = this.navig().userAgent;
        return device;
    }

    isMobile() {
        return window.matchMedia("(pointer:coarse)").matches;
    }

    createHTML(tag) {
        return this.doc().createElement(tag);
    }

    editStyle(element, styles="") {
        return element.style = styles;
    }

    editClickMethod(element, onclick) {
        element.onclick = onclick;
    }

    editMouseOverMethod(element, onmouseover) {
        element.onmouseover = onmouseover;
    }

    addCookie(name, content) {
        this.doc().cookie = `${name}=${content}`;
    }

    deleteCookie(name) {
        this.doc().cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }

    getCookies() {
        return this.doc().cookie
    }
}

function Init(access) {
    console.warn(`Please don't use this function. This function is being taken up by NodeCDN. You can overwrite it but overwriting will cause problems. [Init()]`)
}
